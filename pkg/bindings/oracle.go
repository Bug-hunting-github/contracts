// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_queryID\",\"type\":\"bytes32\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoCompareAPIPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateCryptoCompareAPIPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
var OracleBin = "0x6080604052603380546001600160a01b0319166e0c2e074ec69a0dfb2997ba6c7d2e1e1790557f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976039557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d396603a553480156200007a57600080fd5b506040516200573f3803806200573f83398181016040526080811015620000a057600080fd5b5080516020820151604083015160609093015191929091620000c2836200014d565b620000cd8262000224565b620000d881620002da565b604051806060016040528060408152602001620056ff6040913980516200010891603b9160209091019062000afa565b50603580546001600160a01b0319166001600160a01b038616179055620001346402540be40062000390565b62000143600f60fc1b6200056f565b5050505062000b96565b600054610100900460ff16806200016957506200016962000753565b8062000178575060005460ff16155b620001b55760405162461bcd60e51b815260040180806020018281038252602e815260200180620056d1602e913960400191505060405180910390fd5b600054610100900460ff16158015620001e1576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038216156200020d57603380546001600160a01b0319166001600160a01b0384161790555b801562000220576000805461ff00191690555b5050565b600054610100900460ff16806200024057506200024062000753565b806200024f575060005460ff16155b6200028c5760405162461bcd60e51b815260040180806020018281038252602e815260200180620056d1602e913960400191505060405180910390fd5b600054610100900460ff16158015620002b8576000805460ff1961ff0019909116610100171660011790555b81156200020d576039829055801562000220576000805461ff00191690555050565b600054610100900460ff1680620002f65750620002f662000753565b8062000305575060005460ff16155b620003425760405162461bcd60e51b815260040180806020018281038252602e815260200180620056d1602e913960400191505060405180910390fd5b600054610100900460ff161580156200036e576000805460ff1961ff0019909116610100171660011790555b81156200020d57603a829055801562000220576000805461ff00191690555050565b6035546001600160a01b03161580620003bd5750603554620003bb906001600160a01b03166200075a565b155b15620003d157620003cf60006200075e565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200042257600080fd5b505af115801562000437573d6000803e3d6000fd5b505050506040513d60208110156200044e57600080fd5b50516034546001600160a01b039081169116146200050557603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b505050506040513d6020811015620004e357600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b6034546040805163329ab47960e21b81526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200055357600080fd5b505af115801562000568573d6000803e3d6000fd5b5050505050565b6035546001600160a01b031615806200059c57506035546200059a906001600160a01b03166200075a565b155b15620005b057620005ae60006200075e565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200060157600080fd5b505af115801562000616573d6000803e3d6000fd5b505050506040513d60208110156200062d57600080fd5b50516034546001600160a01b03908116911614620006e457603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200069657600080fd5b505af1158015620006ab573d6000803e3d6000fd5b505050506040513d6020811015620006c257600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b6034546040805163688dcfd760e01b81527fff000000000000000000000000000000000000000000000000000000000000008416600482015290516001600160a01b039092169163688dcfd79160248082019260009290919082900301818387803b1580156200055357600080fd5b303b155b90565b3b90565b60006200076a62000770565b92915050565b60008062000792731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6200075a565b1115620007f557603580546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81526a195d1a17db585a5b9b995d60aa1b6020820152620007ec9062000aea565b50600162000757565b60006200081673c03a2615d5efaf5f49f60b7bb6583eaec212fdf16200075a565b11156200087157603580546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81526b6574685f726f707374656e3360a01b6020820152620007ec9062000aea565b60006200089273b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6200075a565b1115620008ea57603580546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981526832ba342fb5b7bb30b760b91b6020820152620007ec9062000aea565b60006200090b73146500cfd35b22e4a392fe0adc06de1a1368ed486200075a565b11156200096557603580546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81526a6574685f72696e6b65627960a81b6020820152620007ec9062000aea565b60006200098673a2998efd205fb9d4b4963afb70778d6354ad3a416200075a565b1115620009df57603580546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152696574685f676f65726c6960b01b6020820152620007ec9062000aea565b600062000a00736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756200075a565b111562000a365750603580546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000757565b600062000a577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6200075a565b111562000a8d5750603580546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000757565b600062000aae7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6200075a565b111562000ae45750603580546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000757565b50600090565b8051620002209060369060208401905b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000b3d57805160ff191683800117855562000b6d565b8280016001018555821562000b6d579182015b8281111562000b6d57825182559160200191906001019062000b50565b5062000b7b92915062000b7f565b5090565b5b8082111562000b7b576000815560010162000b80565b614b2b8062000ba66000396000f3fe6080604052600436106100915760003560e01c8063996cba6811610059578063996cba681461032c578063b598f8821461036f578063c2c3d0541461038c578063ca6ad1e414610407578063e2b4ce971461043157610091565b806338bbfa50146100965780633acbe96e146101d55780637d73b2311461025f578063877337b014610290578063937f54a4146102b7575b600080fd5b3480156100a257600080fd5b506101d3600480360360608110156100b957600080fd5b81359190810190604081016020820135600160201b8111156100da57600080fd5b8201836020820111156100ec57600080fd5b803590602001918460018302840111600160201b8311171561010d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561015f57600080fd5b82018360208201111561017157600080fd5b803590602001918460018302840111600160201b8311171561019257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610446945050505050565b005b3480156101e157600080fd5b506101ea61061a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022457818101518382015260200161020c565b50505050905090810190601f1680156102515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026b57600080fd5b506102746106a8565b604080516001600160a01b039092168252519081900360200190f35b34801561029c57600080fd5b506102a56106b8565b60408051918252519081900360200190f35b6101d3600480360360408110156102cd57600080fd5b81359190810190604081016020820135600160201b8111156102ee57600080fd5b82018360208201111561030057600080fd5b803590602001918460208302840111600160201b8311171561032157600080fd5b5090925090506106be565b34801561033857600080fd5b506101d36004803603606081101561034f57600080fd5b506001600160a01b03813581169160208101359091169060400135610757565b6101d36004803603602081101561038557600080fd5b5035610804565b34801561039857600080fd5b506101d3600480360360208110156103af57600080fd5b810190602081018135600160201b8111156103c957600080fd5b8201836020820111156103db57600080fd5b803590602001918460018302840111600160201b831117156103fc57600080fd5b509092509050610867565b34801561041357600080fd5b506101d36004803603602081101561042a57600080fd5b503561093c565b34801561043d57600080fd5b506102a56109da565b61044e6109e0565b6001600160a01b0316336001600160a01b0316146104ac576040805162461bcd60e51b815260206004820152601660248201527573656e646572206973206e6f742070726f7661626c6560501b604482015290519081900360640190fd5b6000838152603c60205260408120546001600160a01b031690806104cf83610bcc565b96505050945050505081610524576040805162461bcd60e51b8152602060048201526017602482015276746f6b656e206d75737420626520617661696c61626c6560481b604482015290519081900360640190fd5b603b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260009384936105c5938b938b93909290918301828280156105ba5780601f1061058f576101008083540402835291602001916105ba565b820191906000526020600020905b81548152906001019060200180831161059d57829003601f168201915b505050505086610d55565b909250905081156106105760006105e36105de89611287565b611523565b60008a8152603c6020526040902080546001600160a01b031916905590508161060d878383611536565b50505b5050505050505050565b603b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b505050505081565b6033546001600160a01b03165b90565b603a5490565b6106c7336115bc565b610715576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b6107528383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061164792505050565b505050565b61076033611963565b6107aa576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71030b236b4b760511b604482015290519081900360640190fd5b6107b58383836119bc565b604080516001600160a01b0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b61080d336115bc565b61085b576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b610864816119f6565b50565b61087033611963565b6108ba576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71030b236b4b760511b604482015290519081900360640190fd5b6108c6603b8383614866565b507fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa33838360405180846001600160a01b03168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b610945336115bc565b610993576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b61099c81611ca7565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b60395490565b6035546000906001600160a01b03161580610a0d5750603554610a0b906001600160a01b0316611e70565b155b15610a1e57610a1c6000611e74565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b505050506040513d6020811015610a9857600080fd5b50516034546001600160a01b03908116911614610b4b57603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610aff57600080fd5b505af1158015610b13573d6000803e3d6000fd5b505050506040513d6020811015610b2957600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b603460009054906101000a90046001600160a01b03166001600160a01b031663c281d19e6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610b9b57600080fd5b505af1158015610baf573d6000803e3d6000fd5b505050506040513d6020811015610bc557600080fd5b5051905090565b6060600080600080600080610be2603a54611e7e565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060006040518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015610c6b57600080fd5b8101908080516040519392919084600160201b821115610c8a57600080fd5b908301906020820185811115610c9f57600080fd5b8251600160201b811182820188101715610cb857600080fd5b82525081516020918201929091019080838360005b83811015610ce5578181015183820152602001610ccd565b50505050905090810190601f168015610d125780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b60008060a5855114610da5576040805162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015290519081900360640190fd5b604185600181518110610db457fe5b016020015160f81c14610e0e576040805162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b60408051604180825260808201909252606091602082018180368337019050509050610e408660026041846000611f9f565b865190915060609087906044908110610e5557fe5b0160200151875160f89190911c906101009089906043908110610e7457fe5b016020015160f81c020114610ec9576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840d0cac2c8cae4e640d8cadccee8d60531b604482015290519081900360640190fd5b6040805160608082526080820190925281602082018180368337019050509050610ef98760456060846000611f9f565b9050610f06818388611fed565b610f4b576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b604080516014808252818301909252606091602082018180368337019050509050610f7c82600b6014846000611f9f565b9050600080610f8b83896120b1565b909250905081610fd1576040805162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206461746560a01b604482015290519081900360640190fd5b60408051602c8082526060828101909352602082018180368337019050509050611001856034602c846000611f9f565b905061100c81612412565b8051906020012060028d6040516020018082805190602001908083835b602083106110485780518252601f199092019160209182019101611029565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106110ab5780518252601f19909201916020918201910161108c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156110ea573d6000803e3d6000fd5b5050506040513d60208110156110ff57600080fd5b505160408051602081810193909352815180820384018152908201909152805191012014611174576040805162461bcd60e51b815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156111d85781810151838201526020016111c0565b50505050905090810190601f1680156112055780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611238578181015183820152602001611220565b50505050905090810190601f1680156112655780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60606000826040516020018082805190602001908083835b602083106112be5780518252601f19909201916020918201910161129f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525190506008811180156113065750601c8111155b61134c576040805162461bcd60e51b81526020600482015260126024820152711b5a5cd99bdc9b585d1d1959081a5b9c1d5d60721b604482015290519081900360640190fd5b6040805160078082528183019092526060916020820181803683370190505090506113e3846040516020018082805190602001908083835b602083106113a35780518252601f199092019160209182019101611384565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007846000611f9f565b50805160208201207f7a2d79c44ec25893f1deb7192af566af2e14c179cce8e62e025bd750d6e078e214611450576040805162461bcd60e51b815260206004820152600f60248201526e0e0e4caccd2f040dad2e6dac2e8c6d608b1b604482015290519081900360640190fd5b6114586148e4565b61146185612a56565b905061148f611488604051806040016040528060018152602001601d60f91b815250612a56565b8290612a7b565b50806000015192506114c36114bc604051806040016040528060018152602001607d60f81b815250612a56565b8290612a95565b50805160001984011461150f576040805162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a9cdbdb88199bdc9b585d608a1b604482015290519081900360640190fd5b61151881612af3565b93505050505b919050565b6000611530826012612b5a565b92915050565b611541603a54611e7e565b6001600160a01b031663d545782e8484846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b50505050505050565b60006115c9603954611e7e565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561161557600080fd5b505afa158015611629573d6000803e3d6000fd5b505050506040513d602081101561163f57600080fd5b505192915050565b8051611693576040805160208082526010908201526f195b5c1d1e481d1bdad95b881b1a5cdd60821b818301529051600080516020614a8b8339815191529181900360600190a161195f565b4781516116ba6040518060400160405280600381526020016215549360ea1b8152506133cf565b02111561170b5760408051602080825260149082015273696e73756666696369656e742062616c616e636560601b818301529051600080516020614a8b8339815191529181900360600190a161195f565b6117136148e4565b6117346040518060600160405280603281526020016149bc60329139612a56565b905061173e6148e4565b61177360405180604001604052806014815260200173267473796d733d455448267369676e3d7472756560601b815250612a56565b905060005b835181101561195b57606060006117a186848151811061179457fe5b6020026020010151610bcc565b505050935050509150806117f6576040805162461bcd60e51b8152602060048201526017602482015276746f6b656e206d75737420626520617661696c61626c6560481b604482015290519081900360640190fd5b6117fe6148e4565b61180783612a56565b905060006118556040518060400160405280600381526020016215549360ea1b81525061184f88611849611844878d6135fa90919063ffffffff16565b612a56565b906135fa565b8b613681565b905087858151811061186357fe5b6020026020010151603c600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe6118cc83612af3565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156119105781810151838201526020016118f8565b50505050905090810190601f16801561193d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050600190920191506117789050565b5050505b5050565b6000611970603954611e7e565b6001600160a01b03166324d7806c836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561161557600080fd5b6001600160a01b0382166119e2576119dd6001600160a01b03841682613a4e565b610752565b6107526001600160a01b0383168483613b33565b6060611a00613b85565b9050805160001415611a4b57604080516020808252600990820152686e6f20746f6b656e7360b81b818301529051600080516020614a8b8339815191529181900360600190a161195f565b478151611a726040518060400160405280600381526020016215549360ea1b8152506133cf565b021115611ac35760408051602080825260149082015273696e73756666696369656e742062616c616e636560601b818301529051600080516020614a8b8339815191529181900360600190a161195f565b611acb6148e4565b611aec6040518060600160405280603281526020016149bc60329139612a56565b9050611af66148e4565b611b2b60405180604001604052806014815260200173267473796d733d455448267369676e3d7472756560601b815250612a56565b905060005b835181101561195b576060611b4a85838151811061179457fe5b5050505050509050611b5a6148e4565b611b6382612a56565b90506000611ba66040518060400160405280600381526020016215549360ea1b815250611ba087611849611844878c6135fa90919063ffffffff16565b8a613681565b9050868481518110611bb457fe5b6020026020010151603c600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe611c1d83612af3565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c61578181015183820152602001611c49565b50505050905090810190601f168015611c8e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050600101611b30565b6035546001600160a01b03161580611cd15750603554611ccf906001600160a01b0316611e70565b155b15611ce257611ce06000611e74565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d3257600080fd5b505af1158015611d46573d6000803e3d6000fd5b505050506040513d6020811015611d5c57600080fd5b50516034546001600160a01b03908116911614611e0f57603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611dc357600080fd5b505af1158015611dd7573d6000803e3d6000fd5b505050506040513d6020811015611ded57600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b6034546040805163329ab47960e21b81526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b158015611e5c57600080fd5b505af115801561195b573d6000803e3d6000fd5b3b90565b6000611530613c96565b6033546000906001600160a01b0316611ede576040805162461bcd60e51b815260206004820152601d60248201527f454e535265736f6c7661626c65206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b60335460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d6020811015611f5457600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561161557600080fd5b6060600082850190508084511015611fb657600080fd5b60208087019084015b868860200101821015611fe057888201518682015260209182019101611fbf565b5093979650505050505050565b60008060006120836002876040518082805190602001908083835b602083106120275780518252601f199092019160209182019101612008565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612066573d6000803e3d6000fd5b5050506040513d602081101561207b57600080fd5b505186613fea565b925090508080156120a55750835160208501206001600160a01b038381169116145b925050505b9392505050565b600080836040516020018082805190602001908083835b602083106120e75780518252601f1990920191602091820191016120c8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525160141461212557fe5b61212d6148e4565b61213685612a56565b90506121406148e4565b612162604051806040016040528060018152602001601d60f91b815250612a56565b905061216c6148e4565b61218e604051806040016040528060018152602001600160fd1b815250612a56565b905060006121ac6121a76121a28685612a7b565b612af3565b614072565b90506000811180156121be5750602081105b6121fb576040805162461bcd60e51b81526020600482015260096024820152683230bc9032b93937b960b91b604482015290519081900360640190fd5b600061221261220d6121a28786612a7b565b61407f565b60ff1690506000811180156122275750600d81105b612266576040805162461bcd60e51b815260206004820152600b60248201526a36b7b73a341032b93937b960a91b604482015290519081900360640190fd5b60006122786121a76121a28887612a7b565b90506107e18111801561228c5750610bb881105b6122ca576040805162461bcd60e51b815260206004820152600a6024820152693cb2b0b91032b93937b960b11b604482015290519081900360640190fd5b60006122dc6121a76121a28989612a7b565b905060198110612320576040805162461bcd60e51b815260206004820152600a6024820152693437bab91032b93937b960b11b604482015290519081900360640190fd5b60006123326121a76121a28a8a612a7b565b9050603c8110612378576040805162461bcd60e51b815260206004820152600c60248201526b36b4b73aba329032b93937b960a11b604482015290519081900360640190fd5b600061238a6121a76121a28b8b612a7b565b9050603c81106123d0576040805162461bcd60e51b815260206004820152600c60248201526b39b2b1b7b7321032b93937b960a11b604482015290519081900360640190fd5b60008183606402856127100289620f424002896305f5e10002896402540be40002010101010190508c8111819b509b50505050505050505050505b9250929050565b606060008060008060008651905060608167ffffffffffffffff8111801561243957600080fd5b506040519080825280601f01601f191660200182016040528015612464576020820181803683370190505b50905060008083118015612479575060048306155b6124ca576040805162461bcd60e51b815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b7ff30c17f6c257181e11b9ea19fc7d498b2880fcad645a66e130edeab084271f168960028503815181106124fa57fe5b01602090810151604080516001600160f81b03199092168284015280518083036001018152602190920190528051910120141561253c576002830392506125aa565b7ff30c17f6c257181e11b9ea19fc7d498b2880fcad645a66e130edeab084271f1689600185038151811061256c57fe5b01602090810151604080516001600160f81b0319909216828401528051808303600101815260219092019052805191012014156125aa576001830392505b600319831660005b818110156127c8576040518060a00160405280607b8152602001614a10607b91398b5160018301928d9181106125e457fe5b0160200151815160f89190911c9081106125fa57fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614a10607b91398b5160018301928d91811061263157fe5b0160200151815160f89190911c90811061264757fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001614a10607b91398b5160018301928d91811061267e57fe5b0160200151815160f89190911c90811061269457fe5b602001015160f81c60f81b96506040518060a00160405280607b8152602001614a10607b91398b5160018301928d9181106126cb57fe5b0160200151815160f89190911c9081106126e157fe5b016020015184516001600160f81b031991821697506001850194603f60fa1b60028d901b1660ff60f41b60048d901c1617909216918691811061272057fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b03191691869190811061276b57fe5b60200101906001600160f81b031916908160001a90535083516001840193600360fe1b60068a901b1688176001600160f81b0319169186919081106127ac57fe5b60200101906001600160f81b031916908160001a9053506125b2565b818503600214156128c0576040518060a00160405280607b8152602001614a10607b91398b5160018301928d9181106127fd57fe5b0160200151815160f89190911c90811061281357fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614a10607b91398b5160018301928d91811061284a57fe5b0160200151815160f89190911c90811061286057fe5b602001015160f81c60f81b97506004886001600160f81b031916901c60028a6001600160f81b031916901b1760ff60f81b168484806001019550815181106128a457fe5b60200101906001600160f81b031916908160001a905350612a47565b81850360031415612a47576040518060a00160405280607b8152602001614a10607b91398b5160018301928d9181106128f557fe5b0160200151815160f89190911c90811061290b57fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614a10607b91398b5160018301928d91811061294257fe5b0160200151815160f89190911c90811061295857fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001614a10607b91398b5160018301928d91811061298f57fe5b0160200151815160f89190911c9081106129a557fe5b016020015184516001600160f81b031991821698506001850194603f60fa1b60028d901b1660ff60f41b60048d901c161790921691869181106129e457fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b031916918691908110612a2f57fe5b60200101906001600160f81b031916908160001a9053505b50508152979650505050505050565b612a5e6148e4565b506040805180820190915281518152602082810190820152919050565b612a836148e4565b612a8e83838361438b565b5092915050565b612a9d6148e4565b815183511015612aae575081611530565b8151835160208086015190850151910191909103906001908214612adc575082516020840151819020908220145b8015612aea57835185510385525b50929392505050565b606080826000015167ffffffffffffffff81118015612b1157600080fd5b506040519080825280601f01601f191660200182016040528015612b3c576020820181803683370190505b5090506000602082019050612a8e81856020015186600001516143fc565b60008281808080808080808080805b8b51811015613178578b51600360fc1b908d9083908110612b8657fe5b01602001516001600160f81b03191610801590612bc457508b51603960f81b908d9083908110612bb257fe5b01602001516001600160f81b03191611155b8015612bce575083155b15612c66578415612c2057612be48a600a61443a565b9950612c13603060f81b60f81c8d8381518110612bfd57fe5b01602001518c9160f89190911c0360ff16614493565b9950600190970196612c61565b60019550612c2f8b600a61443a565b9a50612c5e603060f81b60f81c8d8381518110612c4857fe5b01602001518d9160f89190911c0360ff16614493565b9a505b613170565b8b51600360fc1b908d9083908110612c7a57fe5b01602001516001600160f81b03191610801590612cb857508b51603960f81b908d9083908110612ca657fe5b01602001516001600160f81b03191611155b8015612cc15750835b15612d0757612cd189600a61443a565b9850612d00603060f81b60f81c8d8381518110612cea57fe5b01602001518b9160f89190911c0360ff16614493565b9850613170565b8b51601760f91b908d9083908110612d1b57fe5b01602001516001600160f81b0319161415612e225785612d7a576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b8415612dcd576040805162461bcd60e51b815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b8315612e19576040805162461bcd60e51b8152602060048201526016602482015275191958da5b585b0818599d195c88195e1c1bdb995b9d60521b604482015290519081900360640190fd5b60019450613170565b8b51602d60f81b908d9083908110612e3657fe5b01602001516001600160f81b0319161415612f2c578215612e8c576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202d60a81b604482015290519081900360640190fd5b8115612ecc576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b808760010114612f23576040805162461bcd60e51b815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019250613170565b8b51602b60f81b908d9083908110612f4057fe5b01602001516001600160f81b0319161415613036578115612f96576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202b60a81b604482015290519081900360640190fd5b8215612fd6576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b80876001011461302d576040805162461bcd60e51b815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019150613170565b8b51604560f81b908d908390811061304a57fe5b01602001516001600160f81b031916148061308557508b51606560f81b908d908390811061307457fe5b01602001516001600160f81b031916145b1561313357856130d4576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b8315613127576040805162461bcd60e51b815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b60019350809650613170565b6040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908191a59da5d609a1b604482015290519081900360640190fd5b600101612b69565b82806131815750815b1561319a5786600201811161319557600080fd5b6131af565b83156131af578660010181116131af57600080fd5b8215613230578d891061322657604e8e8a0310613203576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b8d8903600a0a8b8161321157fe5b049c506115309b505050505050505050505050565b888e039d5061323d565b61323a8e8a614493565b9d505b878e1061330557604e88106132835760405162461bcd60e51b81526004018080602001828103825260228152602001806149ee6022913960400191505060405180910390fd5b6132918b600a8a900a61443a565b9a5061329d8b8b614493565b9a50604e888f03106132e6576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b6132fe888f03600a0a8c61443a90919063ffffffff16565b9a506133bc565b8d88039750604e88106133495760405162461bcd60e51b81526004018080602001828103825260228152602001806149ee6022913960400191505060405180910390fd5b87600a0a8a8161335557fe5b049950604e8e106133975760405162461bcd60e51b81526004018080602001828103825260228152602001806149ee6022913960400191505060405180910390fd5b6133ad8e600a0a8c61443a90919063ffffffff16565b9a506133b98b8b614493565b9a505b50989d9c50505050505050505050505050565b6035546000906001600160a01b031615806133fc57506035546133fa906001600160a01b0316611e70565b155b1561340d5761340b6000611e74565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561345d57600080fd5b505af1158015613471573d6000803e3d6000fd5b505050506040513d602081101561348757600080fd5b50516034546001600160a01b0390811691161461353a57603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156134ee57600080fd5b505af1158015613502573d6000803e3d6000fd5b505050506040513d602081101561351857600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b60345460405163524f388960e01b81526020600482018181528551602484015285516001600160a01b039094169363524f388993879383926044909201919085019080838360005b8381101561359a578181015183820152602001613582565b50505050905090810190601f1680156135c75780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156135e657600080fd5b505af1158015611629573d6000803e3d6000fd5b8051825160609182910167ffffffffffffffff8111801561361a57600080fd5b506040519080825280601f01601f191660200182016040528015613645576020820181803683370190505b509050600060208201905061366381866020015187600001516143fc565b84516020850151855161367992840191906143fc565b509392505050565b6035546000906001600160a01b031615806136ae57506035546136ac906001600160a01b0316611e70565b155b156136bf576136bd6000611e74565b505b603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561370f57600080fd5b505af1158015613723573d6000803e3d6000fd5b505050506040513d602081101561373957600080fd5b50516034546001600160a01b039081169116146137ec57603560009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156137a057600080fd5b505af11580156137b4573d6000803e3d6000fd5b505050506040513d60208110156137ca57600080fd5b5051603480546001600160a01b0319166001600160a01b039092169190911790555b60345460408051630bbceb3360e21b815260248101859052600481019182528651604482015286516000936001600160a01b031692632ef3accc928992889291829160649091019060208601908083838c5b8381101561385657818101518382015260200161383e565b50505050905090810190601f1680156138835780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156138a357600080fd5b505af11580156138b7573d6000803e3d6000fd5b505050506040513d60208110156138cd57600080fd5b50519050670de0b6b3a76400003a8402018111156138ef5750600090506120aa565b60345460405163c51be90f60e01b8152600060048201818152606483018790526080602484019081528951608485015289516001600160a01b039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015613969578181015183820152602001613951565b50505050905090810190601f1680156139965780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156139c95781810151838201526020016139b1565b50505050905090810190601f1680156139f65780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613a1857600080fd5b505af1158015613a2c573d6000803e3d6000fd5b50505050506040513d6020811015613a4357600080fd5b505195945050505050565b80471015613aa3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114613aee576040519150601f19603f3d011682016040523d82523d6000602084013e613af3565b606091505b50509050806107525760405162461bcd60e51b815260040180806020018281038252603a815260200180614982603a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526107529084906144ed565b6060613b92603a54611e7e565b6001600160a01b031663443dd2a46040518163ffffffff1660e01b815260040160006040518083038186803b158015613bca57600080fd5b505afa158015613bde573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613c0757600080fd5b8101908080516040519392919084600160201b821115613c2657600080fd5b908301906020820185811115613c3b57600080fd5b82518660208202830111600160201b82111715613c5757600080fd5b82525081516020918201928201910280838360005b83811015613c84578181015183820152602001613c6c565b50505050905001604052505050905090565b600080613cb6731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611e70565b1115613d1557603580546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81526a195d1a17db585a5b9b995d60aa1b6020820152613d0d9061459e565b5060016106b5565b6000613d3473c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611e70565b1115613d8c57603580546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81526b6574685f726f707374656e3360a01b6020820152613d0d9061459e565b6000613dab73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611e70565b1115613e0057603580546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981526832ba342fb5b7bb30b760b91b6020820152613d0d9061459e565b6000613e1f73146500cfd35b22e4a392fe0adc06de1a1368ed48611e70565b1115613e7657603580546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81526a6574685f72696e6b65627960a81b6020820152613d0d9061459e565b6000613e9573a2998efd205fb9d4b4963afb70778d6354ad3a41611e70565b1115613eeb57603580546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152696574685f676f65726c6960b01b6020820152613d0d9061459e565b6000613f0a736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611e70565b1115613f3e5750603580546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016106b5565b6000613f5d7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611e70565b1115613f915750603580546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016106b5565b6000613fb07351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611e70565b1115613fe45750603580546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016106b5565b50600090565b6000806000806000855160411461400a576000809450945050505061240b565b50505060208301516040840151606085015160001a601b81101561402c57601b015b8060ff16601b1415801561404457508060ff16601c14155b15614058576000809450945050505061240b565b614064878285856145b1565b945094505050509250929050565b6000611530826000612b5a565b600080826040516020018082805190602001908083835b602083106140b55780518252601f199092019160209182019101614096565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090507f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d981141561412457600191505061151e565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a81141561415657600291505061151e565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec381141561418857600391505061151e565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac1888114156141ba57600491505061151e565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d38114156141ec57600591505061151e565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d81141561421e57600691505061151e565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c81141561425057600791505061151e565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6481141561428257600891505061151e565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac8114156142b457600991505061151e565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f51648114156142e657600a91505061151e565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf481141561431857600b91505061151e565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc81141561434a57600c91505061151e565b6040805162461bcd60e51b81526020600482015260116024820152700dcdee840c240ecc2d8d2c840dadedce8d607b1b604482015290519081900360640190fd5b6143936148e4565b60006143b185600001518660200151866000015187602001516145ee565b602080870180519186019190915280518203855286519051919250018114156143dd57600085526143f3565b8351835186519101900385528351810160208601525b50909392505050565b5b6020811061441c578151835260209283019290910190601f19016143fd565b905182516020929092036101000a6000190180199091169116179052565b60008261444957506000611530565b8282028284828161445657fe5b04146120aa5760405162461bcd60e51b8152600401808060200182810382526021815260200180614aab6021913960400191505060405180910390fd5b6000828201838110156120aa576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6060614542826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146ab9092919063ffffffff16565b8051909150156107525780806020019051602081101561456157600080fd5b50516107525760405162461bcd60e51b815260040180806020018281038252602a815260200180614acc602a913960400191505060405180910390fd5b805161195f9060369060208401906148fe565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b6000838186851161469c57602085116146615783518251600019600860208990030260020a011991821690888a018890039083165b82811461465357818610614641578a8a0196505050505050506146a3565b50600190940180519094908316614623565b8596505050505050506146a3565b508383206000905b858803821161469a578583208181141561468957839450505050506146a3565b506001928301929190910190614669565b505b5050508284015b949350505050565b60606146a3848460008560606146c085614860565b614711576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106147505780518252601f199092019160209182019101614731565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146147b2576040519150601f19603f3d011682016040523d82523d6000602084013e6147b7565b606091505b509150915081156147cb5791506146a39050565b8051156147db5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561482557818101518382015260200161480d565b50505050905090810190601f1680156148525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148a75782800160ff198235161785556148d4565b828001600101855582156148d4579182015b828111156148d45782358255916020019190600101906148b9565b506148e092915061496c565b5090565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061493f57805160ff19168380011785556148d4565b828001600101855582156148d4579182015b828111156148d4578251825591602001919060010190614951565b5b808211156148e0576000815560010161496d56fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d6179206861766520726576657274656468747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d6d6f7265207468616e20373720646563696d616c2064696769747320706172736564000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132334eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212205f68e68e2a1ec8e1df8819bd5d7b812fda4c4b57f1db920f976885532fced7ba64736f6c634300060c0033436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca"

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver_ common.Address, _ens_ common.Address, _controllerNode_ [32]byte, _tokenWhitelistNode_ [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver_, _ens_, _controllerNode_, _tokenWhitelistNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) CryptoCompareAPIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "cryptoCompareAPIPublicKey")
	return *ret0, err
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateCryptoCompareAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateCryptoCompareAPIPublicKey", _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) ParseClaimed(log types.Log) (*OracleClaimed, error) {
	event := new(OracleClaimed)
	if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedUpdateRequest is a log parse operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) ParseFailedUpdateRequest(log types.Log) (*OracleFailedUpdateRequest, error) {
	event := new(OracleFailedUpdateRequest)
	if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol  string
	QueryID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUpdate is a log parse operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) ParseRequestedUpdate(log types.Log) (*OracleRequestedUpdate, error) {
	event := new(OracleRequestedUpdate)
	if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCryptoComparePublicKey is a log parse operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) ParseSetCryptoComparePublicKey(log types.Log) (*OracleSetCryptoComparePublicKey, error) {
	event := new(OracleSetCryptoComparePublicKey)
	if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetGasPrice is a log parse operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) ParseSetGasPrice(log types.Log) (*OracleSetGasPrice, error) {
	event := new(OracleSetGasPrice)
	if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedProof is a log parse operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) ParseVerifiedProof(log types.Log) (*OracleVerifiedProof, error) {
	event := new(OracleVerifiedProof)
	if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
		return nil, err
	}
	return event, nil
}
