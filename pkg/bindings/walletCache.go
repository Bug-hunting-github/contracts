// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ens_\",\"type\":\"address\"},{\"name\":\"_defaultSpendLimit_\",\"type\":\"uint256\"},{\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306003557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966004557fd21a61ac2e4de1319ef7c76dd03046ec2e67a92cfc9efb7c28f79a4c323a5b806005553480156100a057600080fd5b50604051615ea0380380615ea0833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600180546001600160a01b038088166001600160a01b0319928316179283905560008054909216921691909117905593949293919290918380156101245760028190555b50600780546001600160a01b0319166001600160a01b038816179055600885905582156101515760038390555b811561015d5760048290555b80156101695760058190555b505050505050615d228061017e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c8063877337b0116200007b578063877337b0146200011f57806387e8bed11462000129578063a4570e511462000133578063a7a7d3bc146200013d578063e2b4ce971462000147578063fc6cabe7146200015157620000b8565b80633f15457f14620000bd57806360dbc5de14620000e357806371b9076a14620000ef578063747c31d6146200010b5780637d73b2311462000115575b600080fd5b620000c762000171565b604080516001600160a01b039092168252519081900360200190f35b620000ed62000180565b005b620000f9620002a5565b60408051918252519081900360200190f35b620000f9620002ab565b620000c7620002b1565b620000f9620002c0565b620000f9620002c6565b620000c7620002cc565b620000f9620003bb565b620000f9620003c1565b620000c7600480360360208110156200016957600080fd5b5035620003c7565b6007546001600160a01b031681565b60006200018f600554620003ef565b6007546004546001916001600160a01b031690620001ac620003c1565b600354600854604051620001c090620004e9565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156200021c573d6000803e3d6000fd5b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60065490565b60035481565b6001546001600160a01b031690565b60045481565b60055481565b6000620002db600554620003ef565b6001600160a01b0316336001600160a01b03161462000341576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b6006546001111562000357576200035762000180565b600680546000919060001981019081106200036e57fe5b600091825260209091200154600680546001600160a01b03909216925090806200039457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60085481565b60025490565b60068181548110620003d557fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200043d57600080fd5b505afa15801562000452573d6000803e3d6000fd5b505050506040513d60208110156200046957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004b557600080fd5b505afa158015620004ca573d6000803e3d6000fd5b505050506040513d6020811015620004e157600080fd5b505192915050565b6157f680620004f88339019056fe60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002553480156200003557600080fd5b50604051620057f6380380620057f6833981810160405260e08110156200005b57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600180546001600160a01b038087166001600160a01b031992831617928390556000805490921692169190911790559495939492939192909190868685858482818686858015620000ce5760028190555b50600380546001600160a01b0319166001600160a01b0384161760ff60a01b1916740100000000000000000000000000000000000000008315158102919091179182905560ff9104166200015957604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a150506040805160a080820183528382526020808301859052428385018190526000606080860182905260809586018290526009889055600a97909755600b829055600c819055600d805460ff19908116909155600e98909855855193840186526706f05b59d3b200008085529284018390529483018190529482018490529101829052600f8190556010556011919091556012819055601380549092169091559450620002589350506001600160e01b03620002f916915050565b505050505091505060008111620002d057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f737461626c65636f696e206e6f74207365740000000000000000000000000000604482015290519081900360640190fd5b620002e861271082026001600160e01b036200040f16565b5050601a5550620005899350505050565b606060008060008060008062000317600e546200045d60201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156200035057600080fd5b505afa15801562000365573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156200038f57600080fd5b810190808051640100000000811115620003a857600080fd5b82016020810184811115620003bc57600080fd5b8151640100000000811182820187101715620003d757600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b60148190556040805160a0810182528281526020810183905242918101829052600060608201819052608090910181905260158390556016929092556017556018556019805460ff19169055565b60008054604080517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015620004c457600080fd5b505afa158015620004d9573d6000803e3d6000fd5b505050506040513d6020811015620004f057600080fd5b5051604080517f3b3b57de0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156200055557600080fd5b505afa1580156200056a573d6000803e3d6000fd5b505050506040513d60208110156200058157600080fd5b505192915050565b61525d80620005996000396000f3fe6080604052600436106103765760003560e01c80637d7d0046116101d1578063cbd2ac6811610102578063de212bf3116100a0578063f36febda1161006f578063f36febda14610ed6578063f40b51f814610f0f578063f41c431914610f39578063f421764814610f6357610376565b8063de212bf314610e58578063e2b4ce9714610e6d578063e61c51ca14610e82578063eadd3cea14610eac57610376565b8063cd7958dd116100dc578063cd7958dd14610d41578063ce0b5bd514610def578063d251fefc14610e19578063da84b1ed14610e4357610376565b8063cbd2ac6814610ced578063cc0e7e5614610d17578063cccdc55614610d2c57610376565b8063b221f3161161016f578063be40ba7911610149578063be40ba7914610c6b578063beabacc814610c80578063c4856cd914610cc3578063c785141814610cd857610376565b8063b221f31614610bcd578063b242e53414610bf7578063b87e21ef14610c3257610376565b8063877337b0116101ab578063877337b014610b795780638da5cb5b14610b8e57806390e690c714610ba35780639b0dfd2714610bb857610376565b80637d7d004614610a385780637f2debc814610a4d5780637fd004fa14610afe57610376565b80633a43199f116102ab5780635adc02ab11610249578063715018a611610223578063715018a6146109b357806374624c55146109c8578063747c31d6146109f25780637d73b23114610a0757610376565b80635adc02ab146108f95780635d2362a8146109235780636137d6701461093857610376565b80633f579f42116102855780633f579f421461073757806346efe0ed146107fd57806347b55a9d146108cf5780634aa46fde146108e457610376565b80633a43199f146106b75780633bfec254146106e35780633c672eb71461070d57610376565b80632121dc75116103185780632587a6a2116102f25780632587a6a2146105f557806326d05ab21461060a578063294f40251461061f57806332531c3c1461068457610376565b80632121dc75146105a157806321ce918d146105b6578063227149a3146105e057610376565b8063100f23fd11610354578063100f23fd1461044d5780631127b57e146104775780631aa21fba146105015780631efd02991461058c57610376565b806301ffc9a7146103b2578063027ef3eb146103fa5780630f3a85d814610421575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b3480156103be57600080fd5b506103e6600480360360208110156103d557600080fd5b50356001600160e01b031916610fde565b604080519115158252519081900360200190f35b34801561040657600080fd5b5061040f610ff8565b60408051918252519081900360200190f35b34801561042d57600080fd5b5061044b6004803603602081101561044457600080fd5b5035610fff565b005b34801561045957600080fd5b5061044b6004803603602081101561047057600080fd5b50356110fa565b34801561048357600080fd5b5061048c611295565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104c65781810151838201526020016104ae565b50505050905090810190601f1680156104f35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050d57600080fd5b5061044b6004803603604081101561052457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561054e57600080fd5b82018360208201111561056057600080fd5b803590602001918460208302840111600160201b8311171561058157600080fd5b5090925090506112b6565b34801561059857600080fd5b5061040f611440565b3480156105ad57600080fd5b506103e6611451565b3480156105c257600080fd5b5061044b600480360360208110156105d957600080fd5b5035611461565b3480156105ec57600080fd5b506103e66114fa565b34801561060157600080fd5b5061040f611503565b34801561061657600080fd5b506103e6611509565b34801561062b57600080fd5b50610634611512565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610670578181015183820152602001610658565b505050509050019250505060405180910390f35b34801561069057600080fd5b506103e6600480360360208110156106a757600080fd5b50356001600160a01b0316611574565b61044b600480360360408110156106cd57600080fd5b506001600160a01b038135169060200135611589565b3480156106ef57600080fd5b5061044b6004803603602081101561070657600080fd5b50356117c2565b34801561071957600080fd5b5061044b6004803603602081101561073057600080fd5b50356118b7565b34801561074357600080fd5b5061048c6004803603606081101561075a57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561078957600080fd5b82018360208201111561079b57600080fd5b803590602001918460018302840111600160201b831117156107bc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611958945050505050565b34801561080957600080fd5b5061044b6004803603606081101561082057600080fd5b81359190810190604081016020820135600160201b81111561084157600080fd5b82018360208201111561085357600080fd5b803590602001918460018302840111600160201b8311171561087457600080fd5b919390929091602081019035600160201b81111561089157600080fd5b8201836020820111156108a357600080fd5b803590602001918460018302840111600160201b831117156108c457600080fd5b509092509050611e4a565b3480156108db57600080fd5b50610634612163565b3480156108f057600080fd5b506103e66121c3565b34801561090557600080fd5b5061044b6004803603602081101561091c57600080fd5b50356121cc565b34801561092f57600080fd5b5061040f61248e565b34801561094457600080fd5b5061044b6004803603602081101561095b57600080fd5b810190602081018135600160201b81111561097557600080fd5b82018360208201111561098757600080fd5b803590602001918460208302840111600160201b831117156109a857600080fd5b50909250905061249a565b3480156109bf57600080fd5b5061044b61268b565b3480156109d457600080fd5b5061044b600480360360208110156109eb57600080fd5b5035612789565b3480156109fe57600080fd5b5061040f61287c565b348015610a1357600080fd5b50610a1c612882565b604080516001600160a01b039092168252519081900360200190f35b348015610a4457600080fd5b5061040f612891565b348015610a5957600080fd5b5061044b60048036036020811015610a7057600080fd5b810190602081018135600160201b811115610a8a57600080fd5b820183602082011115610a9c57600080fd5b803590602001918460018302840111600160201b83111715610abd57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061289d945050505050565b348015610b0a57600080fd5b5061044b60048036036020811015610b2157600080fd5b810190602081018135600160201b811115610b3b57600080fd5b820183602082011115610b4d57600080fd5b803590602001918460208302840111600160201b83111715610b6e57600080fd5b509092509050612957565b348015610b8557600080fd5b5061040f612c4a565b348015610b9a57600080fd5b50610a1c612c50565b348015610baf57600080fd5b5061044b612c5f565b348015610bc457600080fd5b5061040f612cbd565b348015610bd957600080fd5b5061044b60048036036020811015610bf057600080fd5b5035612cc3565b348015610c0357600080fd5b5061044b60048036036040811015610c1a57600080fd5b506001600160a01b0381351690602001351515612db0565b348015610c3e57600080fd5b5061040f60048036036040811015610c5557600080fd5b506001600160a01b038135169060200135612f6a565b348015610c7757600080fd5b506103e6613005565b348015610c8c57600080fd5b5061044b60048036036060811015610ca357600080fd5b506001600160a01b03813581169160208101359091169060400135613014565b348015610ccf57600080fd5b5061040f6131bf565b348015610ce457600080fd5b506103e66131c5565b348015610cf957600080fd5b5061044b60048036036020811015610d1057600080fd5b50356131ce565b348015610d2357600080fd5b5061040f61353d565b348015610d3857600080fd5b5061040f613543565b348015610d4d57600080fd5b5061040f60048036036020811015610d6457600080fd5b810190602081018135600160201b811115610d7e57600080fd5b820183602082011115610d9057600080fd5b803590602001918460208302840111600160201b83111715610db157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613549945050505050565b348015610dfb57600080fd5b5061044b60048036036020811015610e1257600080fd5b50356135a3565b348015610e2557600080fd5b50610a1c60048036036020811015610e3c57600080fd5b5035613742565b348015610e4f57600080fd5b5061040f613769565b348015610e6457600080fd5b506103e661376f565b348015610e7957600080fd5b5061040f61377d565b348015610e8e57600080fd5b5061044b60048036036020811015610ea557600080fd5b5035613783565b348015610eb857600080fd5b5061044b60048036036020811015610ecf57600080fd5b50356138e7565b348015610ee257600080fd5b5061040f60048036036040811015610ef957600080fd5b506001600160a01b038135169060200135613940565b348015610f1b57600080fd5b5061044b60048036036020811015610f3257600080fd5b5035613b05565b348015610f4557600080fd5b5061044b60048036036020811015610f5c57600080fd5b5035613b5e565b348015610f6f57600080fd5b5061044b60048036036020811015610f8657600080fd5b810190602081018135600160201b811115610fa057600080fd5b820183602082011115610fb257600080fd5b803590602001918460208302840111600160201b83111715610fd357600080fd5b509092509050613bb7565b6001600160e01b031981166301ffc9a760e01b145b919050565b600c545b90565b61100833613edc565b8061101257503330145b611051576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8066038d7ea4c680001115801561107057506706f05b59d3b200008111155b6110ab5760405162461bcd60e51b815260040180806020018281038252602e815260200180614e98602e913960400191505060405180910390fd5b6110bc600f8263ffffffff613ef016565b604080513381526020810183905281517f41ff5d5ce3b7935893a4e7269ec5caae9cca5e3bf0eb4b21d2f443489667112e929181900390910190a150565b61110333613edc565b80611112575061111233613f65565b611160576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b60085460ff166111a15760405162461bcd60e51b81526004018080602001828103825260298152602001806150266029913960400191505060405180910390fd5b61120460068054806020026020016040519081016040528092919081815260200182805480156111fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111dc575b5050505050613549565b81146112415760405162461bcd60e51b81526004018080602001828103825260358152602001806150df6035913960400191505060405180910390fd5b61124d60066000614d69565b6008805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b604051806040016040528060058152602001640322e332e360dc1b81525081565b6112bf33613edc565b806112c957503330145b611308576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8061135a576040805162461bcd60e51b815260206004820152601f60248201527f61737365742061727261792073686f756c64206265206e6f6e2d656d70747900604482015290519081900360640190fd5b60005b818110156113bd57600061138c3085858581811061137757fe5b905060200201356001600160a01b0316613ff9565b90506113b48585858581811061139e57fe5b905060200201356001600160a01b031683613014565b5060010161135d565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b600061144c60156140a4565b905090565b600354600160a01b900460ff1690565b61146a33613edc565b8061147457503330145b6114b3576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b6114c460098263ffffffff6140d916565b6040805182815290517f4b1b970c8a0fa761e7803ed70c13d7aca71904b13df60fbe03f981da1730da919181900360200190a150565b60195460ff1690565b600f5490565b60085460ff1681565b6060600780548060200260200160405190810160405280929190818152602001828054801561156a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161154c575b5050505050905090565b60046020526000908152604090205460ff1681565b61159233613edc565b8061159c57503330145b6115db576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b6115e48261413a565b61162a576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b60006116368383613940565b905061164960158263ffffffff61415416565b6000611656601a546141c1565b90506001600160a01b038416156116fe576116816001600160a01b038516828563ffffffff61428316565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156116e157600080fd5b505af11580156116f5573d6000803e3d6000fd5b50505050611778565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b15801561175e57600080fd5b505af1158015611772573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b6117cb33613edc565b806117d557503330145b611814576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8066038d7ea4c680001115801561182d57506014548111155b6118685760405162461bcd60e51b815260040180806020018281038252602d8152602001806151fc602d913960400191505060405180910390fd5b61187960158263ffffffff613ef016565b604080513381526020810183905281517f0b05243483e17c3f3377aee82b7d47e5700b48288695fc08b7ecc2759afa44ef929181900390910190a150565b6118c033613edc565b806118ca57503330145b611909576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b61191a60098263ffffffff613ef016565b604080513381526020810183905281517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f21929181900390910190a150565b606061196333613edc565b8061196d57503330145b6119ac576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff166119dd576119dd60098463ffffffff61415416565b6119ef846001600160a01b031661439b565b80156119ff57506119ff846143a1565b15611be657600080611a1186856143bb565b6001600160a01b038216600090815260046020526040902054919350915060ff16611a57576000611a428783612f6a565b9050611a5560098263ffffffff61415416565b505b611a706001600160a01b0387168563ffffffff6144c516565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f81518110611aa357fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b3e578181015183820152602001611b26565b50505050905090810190601f168015611b6b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611b9e578181015183820152602001611b86565b50505050905090810190601f168015611bcb5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19250611e43915050565b60006060856001600160a01b031685856040518082805190602001908083835b60208310611c255780518252601f199092019160209182019101611c06565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c87576040519150601f19603f3d011682016040523d82523d6000602084013e611c8c565b606091505b5091509150818190611d1c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ce1578181015183820152602001611cc9565b50505050905090810190601f168015611d0e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138686868460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611da1578181015183820152602001611d89565b50505050905090810190601f168015611dce5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611e01578181015183820152602001611de9565b50505050905090810190601f168015611e2e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19150505b9392505050565b611e5333613f65565b611e92576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b600085858560405160200180806339363c1d60e11b8152506004018481526020018383808284378083019250505093505050506040516020818303038152906040528051906020012090506000611f3084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f2492508691506146839050565b9063ffffffff6146d416565b9050611f3b81613edc565b611f8c576040805162461bcd60e51b815260206004820152601f60248201527f6d657373616765206e6f74207369676e656420627920746865206f776e657200604482015290519081900360640190fd5b601b548714611fcf576040805162461bcd60e51b815260206004820152600a6024820152695478207265706c61792160b01b604482015290519081900360640190fd5b601b80546001019055604051600090606090309089908990808383808284376040519201945060009350909150508083038183865af19150503d8060008114612034576040519150601f19603f3d011682016040523d82523d6000602084013e612039565b606091505b509150915081819061208c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611ce1578181015183820152602001611cc9565b507f823dbcf2b7b0f265871963ca65ac033f6b4c71e0d82cd123d2ff23d752dc21c188888360405180806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b8381101561211b578181015183820152602001612103565b50505050905090810190601f1680156121485780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561156a576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161154c575050505050905090565b600d5460ff1690565b6121d533613f65565b612214576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b60085460ff166122555760405162461bcd60e51b81526004018080602001828103825260298152602001806150266029913960400191505060405180910390fd5b6122b660068054806020026020016040519081016040528092919081815260200182805480156111fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111dc575050505050613549565b81146122f35760405162461bcd60e51b81526004018080602001828103825260338152602001806151146033913960400191505060405180910390fd5b60005b6006548110156123da57600460006006838154811061231157fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166123d2576001600460006006848154811061235057fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560068054600591908390811061239657fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001016122f6565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600660405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818154815260200191508054801561246657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612448575b5050935050505060405180910390a161248160066000614d69565b506008805460ff19169055565b600061144c60096140a4565b6124a333613edc565b806124ad57503330145b6124ec576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b60085460ff161580156125075750600854610100900460ff16155b6125425760405162461bcd60e51b815260040180806020018281038252602e815260200180614f59602e913960400191505060405180910390fd5b60085462010000900460ff166125895760405162461bcd60e51b8152600401808060200182810382526022815260200180614eef6022913960400191505060405180910390fd5b806125c55760405162461bcd60e51b81526004018080602001828103825260228152602001806150bd6022913960400191505060405180910390fd5b6125d160078383614d87565b506008805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d192859285926126409285918591829185019084908082843760009201919091525061354992505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b61269433613edc565b6126de576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600354600160a01b900460ff1661273c576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600380546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b61279233613edc565b8061279c57503330145b6127db576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8066038d7ea4c68000111580156127fa57506706f05b59d3b200008111155b6128355760405162461bcd60e51b815260040180806020018281038252602e815260200180614e98602e913960400191505060405180910390fd5b612846600f8263ffffffff6140d916565b6040805182815290517faf2a77cd04c3cc155588dd3bf67b310ab4fb3b1da3cf6b8d7d4d2aa1d09b794c9181900360200190a150565b601a5490565b6001546001600160a01b031690565b600061144c600f6140a4565b6128a633613edc565b806128b057503330145b6128ef576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b805160206000808060605b8585101561294e5750505050828101805160148201516034909201805160609290921c9291908161293657506040805160208101909152600081525b612941848483611958565b50938101605401936128fa565b50505050505050565b61296033613edc565b8061296a57503330145b6129a9576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b60085460ff161580156129c45750600854610100900460ff16155b6129ff5760405162461bcd60e51b815260040180806020018281038252602e815260200180614f59602e913960400191505060405180910390fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b8151811015612b0157612a58828281518110612a4b57fe5b6020026020010151613edc565b15612a945760405162461bcd60e51b815260040180806020018281038252602d815260200180615090602d913960400191505060405180910390fd5b60006001600160a01b0316828281518110612aab57fe5b60200260200101516001600160a01b03161415612af95760405162461bcd60e51b815260040180806020018281038252602c815260200180614e49602c913960400191505060405180910390fd5b600101612a33565b5060085462010000900460ff16612b495760405162461bcd60e51b8152600401808060200182810382526022815260200180614eef6022913960400191505060405180910390fd5b81612b855760405162461bcd60e51b8152600401808060200182810382526023815260200180614e756023913960400191505060405180910390fd5b612b9160068484614d87565b506008805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c9286928692612bfe9285918591829185019084908082843760009201919091525061354992505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b600e5490565b6003546001600160a01b031690565b612c6833613edc565b612cb2576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b601b80546001019055565b60095490565b612ccc33613edc565b80612cd657503330145b612d15576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8066038d7ea4c6800011158015612d2e57506014548111155b612d695760405162461bcd60e51b815260040180806020018281038252602d8152602001806151fc602d913960400191505060405180910390fd5b612d7a60158263ffffffff6140d916565b6040805182815290517fc178d379965e5657b6fc57494e392f121a14119215dfb422aad7db4cc03f2d109181900360200190a150565b612db933613edc565b612e03576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600354600160a01b900460ff16612e61576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b038216612ea65760405162461bcd60e51b81526004018080602001828103825260238152602001806151476023913960400191505060405180910390fd5b6003805460ff60a01b1916600160a01b8315150217905580612eff57604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600354604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080612f79866147c2565b505050935093509350508015612ff75781612fcd576040805162461bcd60e51b815260206004820152600f60248201526e0746f6b656e2072617465206973203608c1b604482015290519081900360640190fd5b612fed83612fe1878563ffffffff6148ed16565b9063ffffffff61494616565b9350505050612fff565b600093505050505b92915050565b60085462010000900460ff1681565b61301d33613edc565b8061302757503330145b613066576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b80806130b9576040805162461bcd60e51b815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b6001600160a01b038416613114576040805162461bcd60e51b815260206004820181905260248201527f5f746f20616464726573732063616e6e6f742062652073657420746f20307830604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff1661316457816001600160a01b038416156131515761314e8484612f6a565b90505b61316260098263ffffffff61415416565b505b61316f8484846149b0565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b60185490565b60135460ff1690565b6131d733613f65565b613216576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b600854610100900460ff1661325c5760405162461bcd60e51b8152600401808060200182810382526028815260200180614f116028913960400191505060405180910390fd5b6132bd60078054806020026020016040519081016040528092919081815260200182805480156111fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111dc575050505050613549565b81146132fa5760405162461bcd60e51b8152600401808060200182810382526047815260200180614fdf6047913960600191505060405180910390fd5b60005b60075481101561348857600460006007838154811061331857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615613480576000600460006007848154811061335857fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b6005546133a290600163ffffffff614a1416565b81101561346a57600782815481106133b657fe5b600091825260209091200154600580546001600160a01b0390921691839081106133dc57fe5b6000918252602090912001546001600160a01b031614156134625760058054600019810190811061340957fe5b600091825260209091200154600580546001600160a01b03909216918390811061342f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061346a565b60010161338e565b50600580549061347e906000198301614dea565b505b6001016132fd565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600760405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818154815260200191508054801561351457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116134f6575b5050935050505060405180910390a161352f60076000614d69565b506008805461ff0019169055565b60125490565b601b5481565b60008160405160200180828051906020019060200280838360005b8381101561357c578181015183820152602001613564565b50505050905001915050604051602081830303815290604052805190602001209050919050565b6135ac33613edc565b806135bb57506135bb33613f65565b613609576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b600854610100900460ff1661364f5760405162461bcd60e51b8152600401808060200182810382526028815260200180614f116028913960400191505060405180910390fd5b6136b060078054806020026020016040519081016040528092919081815260200182805480156111fa576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111dc575050505050613549565b81146136ed5760405162461bcd60e51b81526004018080602001828103825260328152602001806151946032913960400191505060405180910390fd5b6136f960076000614d69565b6008805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b6005818154811061374f57fe5b6000918252602090912001546001600160a01b0316905081565b60155490565b600854610100900460ff1681565b60025490565b80806137d6576040805162461bcd60e51b815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b6137df33613edc565b806137ee57506137ee33613f65565b61383c576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b61384d600f8363ffffffff61415416565b613855612c50565b6001600160a01b03166108fc839081150290604051600060405180830381858888f1935050505015801561388d573d6000803e3d6000fd5b507f611b7c0d84fda988026215bef9b3e4d81cbceced7e679be6d5e044b588467c0e336138b8612c50565b604080516001600160a01b03938416815291909216602082015280820185905290519081900360600190a15050565b6138f033613f65565b61392f576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b61191a60098263ffffffff614a7116565b600061394a614ac5565b6001600160a01b0316836001600160a01b0316141561396a575080612fff565b816001600160a01b03841615613a3b576000806000613988876147c2565b50505093509350935050806139dd576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206973206e6f7420617661696c61626c6560501b604482015290519081900360640190fd5b81613a21576040805162461bcd60e51b815260206004820152600f60248201526e0746f6b656e2072617465206973203608c1b604482015290519081900360640190fd5b613a3583612fe1888563ffffffff6148ed16565b93505050505b6000806000613a48614b3b565b5050509350935093505080613a9d576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206973206e6f7420617661696c61626c6560501b604482015290519081900360640190fd5b81613ae6576040805162461bcd60e51b81526020600482015260146024820152730737461626c65636f696e207261746520697320360641b604482015290519081900360640190fd5b613afa82612fe1868663ffffffff6148ed16565b979650505050505050565b613b0e33613f65565b613b4d576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b61187960158263ffffffff614a7116565b613b6733613f65565b613ba6576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f39833981519152604482015290519081900360640190fd5b6110bc600f8263ffffffff614a7116565b613bc033613edc565b80613bca57503330145b613c09576040805162461bcd60e51b81526020600482015260146024820152600080516020615070833981519152604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b8151811015613cfe57613c55828281518110612a4b57fe5b15613c915760405162461bcd60e51b815260040180806020018281038252602d815260200180615090602d913960400191505060405180910390fd5b60006001600160a01b0316828281518110613ca857fe5b60200260200101516001600160a01b03161415613cf65760405162461bcd60e51b815260040180806020018281038252602c815260200180614e49602c913960400191505060405180910390fd5b600101613c3d565b5060085462010000900460ff1615613d475760405162461bcd60e51b8152600401808060200182810382526026815260200180614fb96026913960400191505060405180910390fd5b60005b82811015613e385760046000858584818110613d6257fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff16613e3057600160046000868685818110613d9e57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506005848483818110613df357fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b0395909202939093013593909316929092179055505b600101613d4a565b506008805462ff0000191662010000179055604080513380825260208201838152600580549484018590527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a9492939092909190606083019084908015613ec857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613eaa575b5050935050505060405180910390a1505050565b6003546001600160a01b0390811691161490565b600482015460ff1615613f4a576040805162461bcd60e51b815260206004820152601a60248201527f6461696c79206c696d6974206e6f742075706461746561626c65000000000000604482015290519081900360640190fd5b613f548282614c41565b50600401805460ff19166001179055565b6000613f726002546141c1565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613fc757600080fd5b505afa158015613fdb573d6000803e3d6000fd5b505050506040513d6020811015613ff157600080fd5b505192915050565b60006001600160a01b0382161561409357816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561406057600080fd5b505afa158015614074573d6000803e3d6000fd5b505050506040513d602081101561408a57600080fd5b50519050612fff565b506001600160a01b03821631612fff565b60028101546000906140bf906201518063ffffffff614c6416565b4211156140ce57508054610ff3565b506001810154610ff3565b600482015460ff16614132576040805162461bcd60e51b815260206004820152601f60248201527f6461696c79206c696d6974206973207374696c6c2075706461746561626c6500604482015290519081900360640190fd5b600390910155565b600080614146836147c2565b509098975050505050505050565b61415d82614cbe565b80826001015410156141a05760405162461bcd60e51b8152600401808060200182810382526032815260200180614f876032913960400191505060405180910390fd5b60018201546141b5908263ffffffff614a1416565b82600101819055505050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b15801561420e57600080fd5b505afa158015614222573d6000803e3d6000fd5b505050506040513d602081101561423857600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015613fc757600080fd5b801580614309575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156142db57600080fd5b505afa1580156142ef573d6000803e3d6000fd5b505050506040513d602081101561430557600080fd5b5051155b6143445760405162461bcd60e51b81526004018080602001828103825260368152602001806151c66036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526143969084906144c5565b505050565b3b151590565b6000806143ad836147c2565b509198975050505050505050565b6000806143c9600e546141c1565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561443d578181015183820152602001614425565b50505050905090810190601f16801561446a5780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b15801561448757600080fd5b505afa15801561449b573d6000803e3d6000fd5b505050506040513d60408110156144b157600080fd5b508051602090910151909590945092505050565b6144d7826001600160a01b031661439b565b614528576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106145665780518252601f199092019160209182019101614547565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146145c8576040519150601f19603f3d011682016040523d82523d6000602084013e6145cd565b606091505b509150915081614624576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561467d5780806020019051602081101561464057600080fd5b505161467d5760405162461bcd60e51b815260040180806020018281038252602a81526020018061516a602a913960400191505060405180910390fd5b50505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600081516041146146e757506000612fff565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561472d5760009350505050612fff565b8060ff16601b1415801561474557508060ff16601c14155b156147565760009350505050612fff565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156147ad573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60606000806000806000806147d8600e546141c1565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b15801561482d57600080fd5b505afa158015614841573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561486a57600080fd5b810190808051600160201b81111561488157600080fd5b8201602081018481111561489457600080fd5b8151600160201b8111828201871017156148ad57600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949e50929c50909a509850965090945092505050919395979092949650565b6000826148fc57506000612fff565b8282028284828161490957fe5b0414611e435760405162461bcd60e51b815260040180806020018281038252602181526020018061504f6021913960400191505060405180910390fd5b600080821161499c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816149a757fe5b04949350505050565b6001600160a01b0382166149fa576040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156149f4573d6000803e3d6000fd5b50614396565b6143966001600160a01b038316848363ffffffff614d1716565b600082821115614a6b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80826003015414614ab35760405162461bcd60e51b8152600401808060200182810382526029815260200180614ec66029913960400191505060405180910390fd5b614ac1828360030154614c41565b5050565b6000614ad2600e546141c1565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b158015614b0a57600080fd5b505afa158015614b1e573d6000803e3d6000fd5b505050506040513d6020811015614b3457600080fd5b5051905090565b6060600080600080600080614b51600e546141c1565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b158015614b8957600080fd5b505afa158015614b9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015614bc657600080fd5b810190808051600160201b811115614bdd57600080fd5b82016020810184811115614bf057600080fd5b8151600160201b811182820187101715614c0957600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b614c4a82614cbe565b8082556001820154811015614ac157815460018301555050565b600082820183811015611e43576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6002810154614cd6906201518063ffffffff614c6416565b421115614d1457426002820155805460018201556040517fe93bc25276d408d390778e7a8b926f2f67209c43ed540081b951fe128f0d3cd290600090a15b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526143969084906144c5565b5080546000825590600052602060002090810190614d149190614e0a565b828054828255906000526020600020908101928215614dda579160200282015b82811115614dda5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614da7565b50614de6929150614e24565b5090565b815481835581811115614396576000838152602090206143969181019083015b610ffc91905b80821115614de65760008155600101614e10565b610ffc91905b80821115614de65780546001600160a01b0319168155600101614e2a56fe70726f76696465642077686974656c69737420636f6e7461696e7320746865207a65726f206164647265737370656e64696e672077686974656c697374206164646974696f6e20697320656d70747967617320746f7020757020616d6f756e74206973206f75747369646520746865206d696e2f6d61782072616e6765636f6e6669726d656420616e64207375626d6974746564206c696d69747320646f6e74206d6174636877686974656c69737420686173206e6f74206265656e20696e697469616c697a656477686974656c6973742072656d6f76616c20686173206e6f74206265656e207375626d697474656473656e646572206973206e6f74206120636f6e74726f6c6c657200000000000077686974656c697374206f7065726174696f6e2068617320616c7265616479206265656e207375626d6974746564617661696c61626c652068617320746f2062652067726561746572206f7220657175616c20746f2075736520616d6f756e7477686974656c6973742068617320616c7265616479206265656e20696e697469616c697a656468617368206f66207468652070656e64696e672077686974656c6973742072656d6f76616c20646f6573206e6f74206d617463682074686520636f6e6669726d6564206861736877686974656c697374206164646974696f6e20686173206e6f74206265656e207375626d6974746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77656974686572206f776e6572206f722073656c6600000000000000000000000070726f76696465642077686974656c69737420636f6e7461696e7320746865206f776e6572206164647265737370656e64696e672077686974656c6973742072656d6f76616c20697320656d70747968617368206f66207468652070656e64696e672077686974656c697374206164646974696f6e20646f6573206e6f74206d6174636868617368206f66207468652070656e64696e672077686974656c697374206164646974696f6e20646f206e6f74206d617463686f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656468617368206f66207468652070656e64696e672077686974656c6973742072656d6f76616c20646f206e6f74206d617463685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636563617264206c6f616420616d6f756e74206973206f75747369646520746865206d696e2f6d61782072616e6765a265627a7a723058208edec5a749627c5e59c6fd1593e7af99d40e36ec6263a9580f64f530ff2e9b8364736f6c634300050a0032a265627a7a723058207ac0bbd58490ca821126f517c37a70bb83ff2fb71897141c3b3456d9b2d5055964736f6c634300050a0032"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultSpendLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultSpendLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultSpendLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultSpendLimit")
	return *ret0, err
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultSpendLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultSpendLimit(&_WalletCache.CallOpts)
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultSpendLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultSpendLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
